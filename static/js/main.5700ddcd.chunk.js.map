{"version":3,"sources":["../node_modules/moment/src/lib/locale sync","components/LineChart.js","components/Map.js","containers/Dashboard.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","LineChart","props","updateData","myChart","data","labels","map","label","datasets","value","fill","name","borderColor","color","update","console","log","chartRef","React","createRef","this","Chart","current","type","options","responsive","ref","Component","Map","chart","am4core","am4maps","geodata","projection","Miller","enabled","polygonSeries","series","push","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","states","create","properties","values","events","on","ev","target","isActive","department","dataItem","dataContext","onDepartmentClick","style","height","width","Dashboard","constructSpecificDataset","globalDS","specificDS","forEach","elem","date","jour","Object","includes","reanimations","parseInt","rea","returnHome","rad","deaths","dc","hospitalizations","hosp","departmentClicked","departmentsCopy","state","departments","slice","index","indexOf","splice","globalDataSet","setState","specificDataset","length","filter","dep","departmentsDataset","fetch","then","response","text","csv","lines","replace","split","result","headers","i","obj","currentline","j","csvJSON","sexe","departmentsDS","className","d","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5700ddcd.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 163;","import React, { Component } from 'react';\nimport Chart from 'chart.js';\nimport moment from 'moment';\n\nclass LineChart extends Component {\n    constructor(props) {\n        super(props);\n        console.log(\"Line Constructed\");\n\n        this.chartRef = React.createRef();\n    }\n\n    updateData = () => {\n        this.myChart.data.labels = this.props.data.map(e => e.label);\n        this.myChart.data.datasets[0].data = this.props.data.map(e => e.value);\n        this.myChart.data.datasets[0].fill = false;\n        this.myChart.data.datasets[0].label = this.props.name;\n        this.myChart.data.datasets[0].borderColor = this.props.color;\n        this.myChart.update();\n    }\n\n    componentDidMount() {\n        console.log(\"Line Mounted\");\n        this.myChart = new Chart(this.chartRef.current, {\n            type: 'line',\n            data: {\n                labels: [],\n                datasets: [{\n                }]\n            },\n            options: {\n                responsive: true\n            }\n        });\n        this.updateData();\n    }\n\n    componentDidUpdate() {\n        console.log(\"Line Updated\");\n        this.updateData();\n    }\n\n    render() {\n        console.log(\"Line Rendered\");\n        console.log(this.props.data);\n        return (\n            <div>\n                <canvas ref={this.chartRef}></canvas>\n            </div>\n\n        )\n    }\n}\n\nexport default LineChart;","import React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport map from \"@amcharts/amcharts4-geodata/franceDepartmentsLow\";\n\n\nclass Map extends Component {\n\n    constructor(props) {\n        super(props);\n        console.log(\"Map Constructed\");\n    }\n\n    componentDidMount() {\n        console.log(\"Map Mounted\");\n        this.chart = am4core.create(\"french-map\", am4maps.MapChart);\n        this.chart.geodata = map;\n        this.chart.projection = new am4maps.projections.Miller();\n        this.chart.responsive.enabled = true;\n\n        // Create map polygon series\n        var polygonSeries = this.chart.series.push(new am4maps.MapPolygonSeries());\n\n        // Make map load polygon (like country names) data from GeoJSON\n        polygonSeries.useGeodata = true;\n\n        var polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}\";\n\n        // Create hover state and set alternative fill color\n        var hs = polygonTemplate.states.create(\"hover\");\n        hs.properties.fill = am4core.color(\"#011627\");\n\n        // Create hover state and set alternative fill color\n        var hs = polygonTemplate.states.create(\"active\");\n        hs.properties.fill = am4core.color(\"#011627\");\n\n        this.chart.series.values[0].data = this.props.data;\n\n        polygonTemplate.events.on(\"hit\", (ev) => {\n            ev.target.isActive = !ev.target.isActive;\n            let department = ev.target.dataItem.dataContext.department;\n\n            this.props.onDepartmentClick(department);\n        });\n    }\n\n    render() {\n        console.log(\"Map Rendered\");\n\n        return (\n            <div style={{ height: \"500px\", width: \"500px\" }} id=\"french-map\"></div>\n        )\n    }\n}\n\nexport default Map;","import React, { Component } from 'react';\nimport LineChart from '../components/LineChart';\nimport Map from '../components/Map';\nimport './Dashboard.css';\n\nclass Dashboard extends Component {\n    constructor() {\n        super();\n        console.log(\"Dashboard Constructed\");\n        this.state = {\n            globalDataSet: [],\n            specificDataset: [],\n            departmentsDataset: [],\n            departments: []\n        }\n    }\n\n    constructSpecificDataset = (globalDS) => {\n        console.log(\"Specific Dataset Constructed\");\n        let specificDS = {};\n        globalDS.forEach(elem => {\n            let date = elem.jour;\n            if (Object.keys(specificDS).includes(date)) {\n                specificDS[date].reanimations = parseInt(elem.rea) + parseInt(specificDS[date].reanimations);\n                specificDS[date].returnHome = parseInt(elem.rad) + parseInt(specificDS[date].returnHome);\n                specificDS[date].deaths = parseInt(elem.dc) + parseInt(specificDS[date].deaths);\n                specificDS[date].hospitalizations = parseInt(elem.hosp) + parseInt(specificDS[date].hospitalizations);\n\n            } else {\n                specificDS[date] = {\n                    date: date,\n                    reanimations: elem.rea,\n                    returnHome: elem.rad,\n                    deaths: elem.dc,\n                    hospitalizations: elem.hosp\n                }\n            }\n        });\n\n        return Object.values(specificDS);\n    }\n\n    componentDidMount() {\n\n        console.log(\"Dashboard Mounted\");\n        let globalDS = [];\n        fetch('https://www.data.gouv.fr/fr/datasets/r/63352e38-d353-4b54-bfd1-f1b3ee1cabd7')\n            .then(response => response.text())\n            .then(text => {\n                globalDS = csvJSON(text).filter(e => e.sexe === \"0\");\n\n                let specificDS = this.constructSpecificDataset(globalDS);\n\n                let departmentsDS = globalDS.filter(e => e.jour === '2020-04-01').map(e => {\n                    return {\n                        id: \"FR-\" + e.dep,\n                        value: e.rea,\n                        department: e.dep\n                    }\n                });\n\n                this.setState({\n                    specificDataset: specificDS,\n                    globalDataSet: globalDS,\n                    departmentsDataset: departmentsDS\n                });\n            });\n    }\n\n    departmentClicked = (department) => {\n        console.log(\"Department Click Handler\");\n        let departmentsCopy = this.state.departments.slice();\n\n        var index = departmentsCopy.indexOf(department);\n        if (index == -1) {\n            departmentsCopy.push(department);\n        } else {\n            departmentsCopy.splice(index, 1);\n        }\n\n        console.log(this.state.globalDataSet);\n\n        this.setState({\n            departments: departmentsCopy,\n            specificDataset: departmentsCopy.length === 0 ? this.constructSpecificDataset(this.state.globalDataSet) : this.constructSpecificDataset(this.state.globalDataSet.filter(e => departmentsCopy.includes(e.dep)))\n        })\n    }\n\n\n    render() {\n        console.log(\"Dashboard Rendered\");\n        return (\n            !this.state.departmentsDataset.length ?\n                <h1>Loading</h1> :\n                <div className=\"dashboard\">\n                    <Map data={this.state.departmentsDataset} onDepartmentClick={this.departmentClicked} />\n                    <div className=\"chartsContainer\">\n                        <LineChart\n                            data={this.state.specificDataset.map(d => {\n                                return {\n                                    label: d.date,\n                                    value: d.hospitalizations\n                                }\n                            })}\n                            name=\"Hospitalisations\"\n                            color=\"#c45850\" />\n\n                        <LineChart\n                            data={this.state.specificDataset.map(d => {\n                                return {\n                                    label: d.date,\n                                    value: d.reanimations\n                                }\n                            })}\n                            name=\"Reanimations\"\n                            color=\"#3e95cd\" />\n\n                        <LineChart\n                            data={this.state.specificDataset.map(d => {\n                                return {\n                                    label: d.date,\n                                    value: d.returnHome\n                                }\n                            })}\n                            name=\"Retours à domicile\"\n                            color=\"#8e5ea2\" />\n\n                        <LineChart\n                            data={this.state.specificDataset.map(d => {\n                                return {\n                                    label: d.date,\n                                    value: d.deaths\n                                }\n                            })}\n                            name=\"Décès\"\n                            color=\"#3cba9f\" />\n                    </div>\n                </div>\n        )\n    }\n}\n\nfunction csvJSON(csv) {\n    const lines = csv.replace(/\"/g, '').split('\\n')\n    const result = []\n    const headers = lines[0].replace(/\\s/g, '').replace(/\"/g, '').split(';');\n\n    for (let i = 1; i < lines.length; i++) {\n        if (!lines[i])\n            continue\n        const obj = {}\n        const currentline = lines[i].split(';')\n\n        for (let j = 0; j < headers.length; j++) {\n            obj[headers[j]] = currentline[j]\n        }\n        result.push(obj)\n    }\n    return result\n}\n\nexport default Dashboard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './containers/Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Dashboard />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}